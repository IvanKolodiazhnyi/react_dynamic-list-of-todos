{"version":3,"sources":["components/TodoList/TodoList.jsx","api/todos.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","onUserId","selectedUserId","search","onSearch","onSelect","className","type","onChange","target","placeholder","value","event","map","todo","classNames","completed","key","id","readOnly","title","userId","onClick","BASE_URL","request","url","options","fetch","then","result","json","data","CurrentUser","state","user","this","props","setState","prevProps","onClear","name","email","phone","React","Component","App","selectFilter","clearUser","handleUserId","searchHandler","todosSelectFilter","visibleTodos","filter","trim","toLocaleLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6b783b2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  onUserId,\n  selectedUserId,\n  search,\n  onSearch,\n  onSelect,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <input\n        type=\"text\"\n        onChange={({ target }) => onSearch(target)}\n        placeholder=\"Filter todos\"\n        value={search}\n      />\n      <select\n        onChange={event => onSelect(event.target.value)}\n      >\n        <option\n          value=\"All\"\n        >\n          All\n        </option>\n        <option\n          value=\"Completed\"\n        >\n          Completed\n        </option>\n        <option\n          value=\"Active\"\n        >\n          Active\n        </option>\n      </select>\n      <ul>\n        {todos.map(todo => (\n          <li\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                'button', {\n                  'TodoList__user-button--selected': todo.userId\n                    === selectedUserId,\n                },\n              )}\n              type=\"button\"\n              onClick={() => onUserId(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onUserId: PropTypes.func.isRequired,\n  onSearch: PropTypes.func.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  search: PropTypes.string.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(\n  !options ? `${BASE_URL}${url}` : `${BASE_URL}${url}${options}`,\n)\n  .then(result => result.json())\n  .then(result => result.data);\n\nexport function getTodos() {\n  return request('/todos');\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api/todos';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    request('/users', `/${this.props.userId}`)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      request('/users', `/${this.props.userId}`)\n        .then((user) => {\n          this.setState({ user });\n        });\n    }\n  }\n\n  render() {\n    const { onClear } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onClear()}\n            >\n              Clear select user\n            </button>\n          </>\n        ) : (\n          <>\n            Loading...\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/todos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    search: '',\n    selectFilter: 'All',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  handleUserId = (userId) => {\n    if (this.selectedUserId !== userId) {\n      this.setState({ selectedUserId: userId });\n    }\n  };\n\n  searchHandler = ({ value }) => {\n    this.setState({\n      search: value,\n    });\n  };\n\n  todosSelectFilter = (value) => {\n    this.setState({ selectFilter: value });\n  };\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      search,\n      selectFilter,\n    } = this.state;\n\n    let visibleTodos = todos\n      .filter(todo => !!todo.title)\n      .filter(\n        (todo) => {\n          const { title } = todo;\n\n          return (\n            title.trim().toLocaleLowerCase()\n              .includes(search.trim().toLocaleLowerCase())\n          );\n        },\n      );\n\n    if (selectFilter === 'Completed') {\n      visibleTodos = visibleTodos.filter(({ completed }) => completed);\n    }\n\n    if (selectFilter === 'Active') {\n      visibleTodos = visibleTodos.filter(({ completed }) => !completed);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={visibleTodos}\n            onUserId={this.handleUserId}\n            selectedUserId={selectedUserId}\n            search={search}\n            onSearch={this.searchHandler}\n            onSelect={this.todosSelectFilter}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}